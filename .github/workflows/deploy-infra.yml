name: Terraform Deploy v2

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: false
        type: string
        default: 'dev'
      action:
        description: 'Terraform action to perform'
        required: false
        type: string
        default: 'apply'
    outputs:
      s3-bucket-name:
        description: "The S3 bucket name for the deployed infrastructure"
        value: ${{ jobs.terraform.outputs.s3-bucket-name }}
      cloudfront-distribution-id:
        description: "The CloudFront distribution ID"
        value: ${{ jobs.terraform.outputs.cloudfront-distribution-id }}
      website-url:
        description: "The website URL for the deployed infrastructure"
        value: ${{ jobs.terraform.outputs.website-url }}
  push:
    branches:
      - main
    paths:
      - 'infra/terraform/**'
      - '.github/workflows/terraform-deploy-v2.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'infra/terraform/**'
      - '.github/workflows/terraform-deploy-v2.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: "1.7.0"
  AWS_REGION: "us-east-1"

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      infra-changed: ${{ steps.changes.outputs.infra }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            infra:
              - 'infra/terraform/**'
              - '.github/workflows/terraform-deploy-v2.yml'

  terraform-check:
    name: Terraform Validation
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.infra-changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'workflow_call'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        working-directory: infra/terraform
        run: |
          terraform fmt -check -recursive || {
            echo "::error::Terraform files are not formatted. Run 'terraform fmt -recursive' to fix."
            exit 1
          }

      - name: Terraform Init (validation only)
        working-directory: infra/terraform
        run: terraform init -backend=false

      - name: Terraform Validate
        working-directory: infra/terraform
        run: terraform validate

  terraform-plan:
    name: Terraform Plan - ${{ matrix.environment }}
    runs-on: ubuntu-latest
    needs: [terraform-check, check-changes]
    if: |
      (github.event_name == 'pull_request' && needs.check-changes.outputs.infra-changed == 'true') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan') ||
      (github.event_name == 'workflow_call' && inputs.action == 'plan')
    
    strategy:
      matrix:
        environment: [dev]
        
    permissions:
      id-token: write
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Check Prerequisites
        run: |
          echo "Checking S3 backend bucket..."
          if ! aws s3api head-bucket --bucket requisition-terraform-state 2>/dev/null; then
            echo "Creating state bucket requisition-terraform-state..."
            aws s3api create-bucket \
              --bucket requisition-terraform-state \
              --region us-east-1
            
            aws s3api put-bucket-versioning \
              --bucket requisition-terraform-state \
              --versioning-configuration Status=Enabled
            
            aws s3api put-bucket-encryption \
              --bucket requisition-terraform-state \
              --server-side-encryption-configuration '{"Rules": [{"ApplyServerSideEncryptionByDefault": {"SSEAlgorithm": "AES256"}}]}'
            
            aws s3api put-public-access-block \
              --bucket requisition-terraform-state \
              --public-access-block-configuration "BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true"
          fi
          
          echo "Checking Route53 zone..."
          if ! aws route53 list-hosted-zones --query "HostedZones[?Name=='thomfilg.com.']" --output text | grep -q "thomfilg.com"; then
            echo "::warning::Route53 hosted zone for thomfilg.com not found. Please create it manually."
          fi

      - name: Terraform Init
        working-directory: infra/terraform
        run: |
          terraform init \
            -backend-config="environments/${{ matrix.environment }}/backend.tfvars" \
            -reconfigure

      - name: Terraform Plan
        id: plan
        working-directory: infra/terraform
        run: |
          terraform plan \
            -var-file="environments/${{ matrix.environment }}/terraform.tfvars" \
            -no-color \
            -out=tfplan-${{ matrix.environment }} \
            | tee plan-output.txt

      - name: Comment PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const planOutput = fs.readFileSync('infra/terraform/plan-output.txt', 'utf8');
            
            // Truncate if too long
            const maxLength = 65000;
            const truncatedOutput = planOutput.length > maxLength 
              ? planOutput.substring(0, maxLength) + '\n\n... (truncated)'
              : planOutput;
            
            const commentIdentifier = `## Terraform Plan Results - ${{ matrix.environment }}`;
            
            // Find and delete existing comments with the same identifier
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            // Delete comments from github-actions bot that match our identifier
            for (const comment of comments) {
              if (comment.user.type === 'Bot' && 
                  comment.user.login === 'github-actions[bot]' &&
                  comment.body.includes(commentIdentifier)) {
                await github.rest.issues.deleteComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: comment.id
                });
                console.log(`Deleted previous plan comment: ${comment.id}`);
              }
            }
            
            // Create new comment
            const newComment = `${commentIdentifier}
            
            <details>
            <summary>Show Plan</summary>
            
            \`\`\`terraform
            ${truncatedOutput}
            \`\`\`
            
            </details>`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: newComment
            });

  terraform-deploy:
    name: Terraform Deploy - ${{ matrix.environment }}
    runs-on: ubuntu-latest
    needs: [terraform-check, check-changes]
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.check-changes.outputs.infra-changed == 'true') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action != 'plan') ||
      (github.event_name == 'workflow_call' && inputs.action != 'plan')
    outputs:
      s3-bucket-name: ${{ steps.outputs.outputs.s3-bucket-name }}
      cloudfront-distribution-id: ${{ steps.outputs.outputs.cloudfront-distribution-id }}
      website-url: ${{ steps.outputs.outputs.website-url }}
    
    strategy:
      matrix:
        environment: ${{ github.event_name == 'workflow_dispatch' && fromJSON(format('["{0}"]', github.event.inputs.environment)) || (github.event_name == 'pull_request' && fromJSON('["dev"]')) || fromJSON('["dev"]') }}
        
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Ensure Backend Resources
        run: |
          echo "Ensuring S3 backend bucket exists..."
          if ! aws s3api head-bucket --bucket requisition-terraform-state 2>/dev/null; then
            echo "Creating state bucket requisition-terraform-state..."
            aws s3api create-bucket \
              --bucket requisition-terraform-state \
              --region us-east-1
            
            aws s3api put-bucket-versioning \
              --bucket requisition-terraform-state \
              --versioning-configuration Status=Enabled
            
            aws s3api put-bucket-encryption \
              --bucket requisition-terraform-state \
              --server-side-encryption-configuration '{"Rules": [{"ApplyServerSideEncryptionByDefault": {"SSEAlgorithm": "AES256"}}]}'
            
            aws s3api put-public-access-block \
              --bucket requisition-terraform-state \
              --public-access-block-configuration "BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true"
          fi
          
          echo "Checking DynamoDB lock table..."
          if ! aws dynamodb describe-table --table-name terraform-locks 2>/dev/null; then
            echo "Creating DynamoDB lock table..."
            aws dynamodb create-table \
              --table-name terraform-locks \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST \
              --region us-east-1
          fi

      - name: Terraform Init
        working-directory: infra/terraform
        run: |
          terraform init \
            -backend-config="environments/${{ matrix.environment }}/backend.tfvars" \
            -reconfigure

      - name: Terraform Action
        working-directory: infra/terraform
        run: |
          ACTION="${{ github.event.inputs.action || 'apply' }}"
          
          case $ACTION in
            plan)
              terraform plan -var-file="environments/${{ matrix.environment }}/terraform.tfvars"
              ;;
            apply)
              terraform apply -var-file="environments/${{ matrix.environment }}/terraform.tfvars" -auto-approve
              ;;
            destroy)
              terraform destroy -var-file="environments/${{ matrix.environment }}/terraform.tfvars" -auto-approve
              ;;
          esac

      - name: Capture Outputs
        id: outputs
        if: success() && (github.event.inputs.action == 'apply' || github.event_name == 'push' || github.event_name == 'workflow_call')
        working-directory: infra/terraform
        run: |
          # Capture terraform outputs
          S3_BUCKET=$(terraform output -raw s3_bucket_name 2>/dev/null || echo "")
          CF_DIST_ID=$(terraform output -raw cloudfront_distribution_id 2>/dev/null || echo "")
          WEBSITE_URL=$(terraform output -raw website_url 2>/dev/null || echo "")
          
          echo "s3-bucket-name=$S3_BUCKET" >> $GITHUB_OUTPUT
          echo "cloudfront-distribution-id=$CF_DIST_ID" >> $GITHUB_OUTPUT
          echo "website-url=$WEBSITE_URL" >> $GITHUB_OUTPUT

      - name: Output Summary
        if: success() && (github.event.inputs.action == 'apply' || github.event_name == 'push')
        working-directory: infra/terraform
        run: |
          echo "## Deployment Summary for ${{ matrix.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Outputs:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          terraform output >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY