name: Deploy Infrastructure

on:
  workflow_call:
    outputs:
      s3-bucket-name:
        description: "The S3 bucket name for the deployed infrastructure"
        value: ${{ jobs.infra-complete.outputs.s3-bucket-name }}
      website-url:
        description: "The website URL for the deployed infrastructure"
        value: ${{ jobs.infra-complete.outputs.website-url }}
      infra-changed:
        description: "Whether infrastructure was changed"
        value: ${{ jobs.infra-complete.outputs.infra-changed }}
      infra-deployed:
        description: "Whether infrastructure was successfully deployed"
        value: ${{ jobs.infra-complete.outputs.infra-deployed }}
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'Production'
        type: choice
        options:
          - Production
          - Development
      dry_run:
        description: 'Run terraform plan only (no apply)'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: ${{ vars.AWS_REGION || 'us-east-1' }}
  TERRAFORM_VERSION: ${{ vars.TERRAFORM_VERSION || '1.7.0' }}
  DEPLOY_ON_PR: ${{ vars.DEPLOY_ON_PR || 'false' }}

permissions:
  id-token: write   # Required for OIDC
  contents: read    # Required for actions/checkout
  actions: read     # Required for reusable workflows

jobs:
  ci:
    uses: ./.github/workflows/ci.yml

  check-changes:
    runs-on: ubuntu-latest
    outputs:
      infra-changed: ${{ steps.changes.outputs.infra-changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 10  # Get last 10 commits for better detection
      
      - name: Simple infrastructure change detection
        id: changes
        run: |
          # Force infrastructure deployment for these triggers
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] || 
            [ "${{ github.event_name }}" = "workflow_run" ]; then
            echo "Manual/workflow trigger - deploying infrastructure"
            echo "infra-changed=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # For push to main, always deploy infrastructure
          if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "Push to main branch - deploying infrastructure"
            echo "infra-changed=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # For PRs, check if any infrastructure files exist in the diff
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "Checking PR for infrastructure changes..."
            # Get list of all changed files in this PR
            gh pr diff ${{ github.event.pull_request.number }} --name-only > changed_files.txt || {
              echo "Could not get PR diff, checking recent commits instead"
              git log --name-only --format="" -10 | sort -u > changed_files.txt
            }
          else
            echo "Checking recent commits for infrastructure changes..."
            git log --name-only --format="" -5 | sort -u > changed_files.txt
          fi
          
          echo "Files to check:"
          cat changed_files.txt
          
          # Check for infrastructure files
          if grep -qE "(^infra/terraform/|deploy-infra\.yml)" changed_files.txt; then
            echo "‚úÖ Infrastructure files found"
            echo "infra-changed=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå No infrastructure files found"
            echo "infra-changed=false" >> $GITHUB_OUTPUT
          fi
          
          rm -f changed_files.txt
        env:
          GH_TOKEN: ${{ github.token }}

  terraform-plan:
    runs-on: ubuntu-latest
    needs: [check-changes]
    environment: ${{ github.event.inputs.environment || 'Production' }}
    if: |
      (github.ref == 'refs/heads/main' || github.event_name == 'pull_request') &&
      (github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success') &&
      (needs.check-changes.outputs.infra-changed == 'true' || github.event_name == 'workflow_dispatch')
    steps:
      - name: Check PR deployment setting
        if: github.event_name == 'pull_request' && env.DEPLOY_ON_PR != 'true'
        run: |
          echo "‚ùå PR infrastructure deployments are disabled. Set DEPLOY_ON_PR=true to enable."
          exit 1
      
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate required secrets
        uses: ./.github/actions/validate-secrets
        with:
          s3-bucket-name: ${{ vars.S3_BUCKET_NAME }}
          s3-state-bucket-name: ${{ vars.S3_STATE_BUCKET_NAME }}
          aws-role-arn: ${{ secrets.AWS_ROLE_ARN }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        id: init
        working-directory: infra/terraform
        run: |
          ENVIRONMENT_NAME=${{ github.event.inputs.environment || 'Production' }}
          echo "Terraform state key: portfolio/${ENVIRONMENT_NAME,,}/terraform.tfstate"
          terraform init \
            -backend-config="bucket=${{ vars.S3_STATE_BUCKET_NAME }}" \
            -backend-config="key=portfolio/${ENVIRONMENT_NAME,,}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"

      - name: Terraform Format Check
        working-directory: infra/terraform
        run: terraform fmt -check

      - name: Terraform Validate
        working-directory: infra/terraform
        run: terraform validate

      - name: Terraform Plan
        working-directory: infra/terraform
        run: terraform plan -out=tfplan # ‚úÖ Generate a plan file
        env:
          TF_VAR_bucket_name: ${{ vars.S3_BUCKET_NAME }}
          TF_VAR_environment: ${{ github.event.inputs.environment || 'Production' }}
          TF_VAR_github_repository: ${{ github.repository }}
          TF_VAR_create_iam_resources: true
          TF_VAR_use_oidc: true
          TF_VAR_domain_name: ${{ vars.DOMAIN_NAME || 'thomfilg.com' }}
          TF_VAR_subdomain_names: ${{ vars.SUBDOMAIN_NAMES || '["www.thomfilg.com"]' }}
          TF_VAR_create_ssl_certificate: ${{ vars.CREATE_SSL_CERTIFICATE || 'true' }}
          TF_VAR_create_cloudfront_distribution: ${{ vars.CREATE_CLOUDFRONT_DISTRIBUTION || 'true' }}
          TF_VAR_create_route53_records: ${{ vars.CREATE_ROUTE53_RECORDS || 'false' }}
          TF_VAR_hosted_zone_id: ${{ vars.HOSTED_ZONE_ID || '' }}
          TF_VAR_create_shared_resources: true

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4 # ‚úÖ Upload the plan file
        with:
          name: terraform-plan
          path: infra/terraform/tfplan

  deploy-infrastructure:
    runs-on: ubuntu-latest
    needs: [ci, terraform-plan, check-changes]
    if: |
      needs.ci.result == 'success' &&
      needs.terraform-plan.result == 'success' && 
      (github.ref == 'refs/heads/main' || github.event_name == 'pull_request') && 
      github.event.inputs.dry_run != 'true' &&
      (needs.check-changes.outputs.infra-changed == 'true' || github.event_name == 'workflow_dispatch')
    environment: ${{ github.event.inputs.environment || 'Production' }}
    steps:
      - name: Check PR deployment setting
        if: github.event_name == 'pull_request' && env.DEPLOY_ON_PR != 'true'
        run: |
          echo "‚ùå PR infrastructure deployments are disabled. Set DEPLOY_ON_PR=true to enable."
          exit 1
      
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: infra/terraform

      - name: Terraform Init
        working-directory: infra/terraform
        run: |
          ENVIRONMENT_NAME=${{ github.event.inputs.environment || 'Production' }}
          terraform init \
            -backend-config="bucket=${{ vars.S3_STATE_BUCKET_NAME }}" \
            -backend-config="key=portfolio/${ENVIRONMENT_NAME,,}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"

      - name: Terraform Apply
        working-directory: infra/terraform
        run: terraform apply -auto-approve tfplan # ‚úÖ Apply the downloaded plan

      - name: Display infrastructure info
        # This step remains the same
        working-directory: infra/terraform
        run: |
          echo "üèóÔ∏è Infrastructure deployment successful!"
          echo "üåç Environment: ${{ github.event.inputs.environment || 'Production' }}"
          echo "S3 Bucket: $(terraform output -raw s3_bucket_name)"
          echo "Website URL: $(terraform output -raw website_url)"
          echo "üìù Note: Application code needs to be deployed separately."

  # Summary job that always runs to provide consistent status for dependent workflows
  infra-complete:
    runs-on: ubuntu-latest
    needs: [ci, check-changes, terraform-plan, deploy-infrastructure]
    if: always()
    outputs:
      infra-changed: ${{ needs.check-changes.outputs.infra-changed }}
      infra-deployed: ${{ needs.deploy-infrastructure.result == 'success' }}
      ci-success: ${{ needs.ci.result == 'success' }}
      s3-bucket-name: ${{ steps.get-outputs.outputs.s3-bucket-name }}
      website-url: ${{ steps.get-outputs.outputs.website-url }}
    steps:
      - name: Checkout code
        if: needs.deploy-infrastructure.result == 'success'
        uses: actions/checkout@v4

      - name: Setup Terraform
        if: needs.deploy-infrastructure.result == 'success'
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Configure AWS credentials
        if: needs.deploy-infrastructure.result == 'success'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init and Get Outputs
        if: needs.deploy-infrastructure.result == 'success'
        id: get-outputs
        working-directory: infra/terraform
        run: |
          ENVIRONMENT_NAME=${{ github.event.inputs.environment || 'Production' }}
          terraform init \
            -backend-config="bucket=${{ vars.S3_STATE_BUCKET_NAME }}" \
            -backend-config="key=portfolio/${ENVIRONMENT_NAME,,}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"
          
          S3_BUCKET_NAME=$(terraform output -raw s3_bucket_name)
          WEBSITE_URL=$(terraform output -raw website_url)
          
          echo "s3-bucket-name=$S3_BUCKET_NAME" >> $GITHUB_OUTPUT
          echo "website-url=$WEBSITE_URL" >> $GITHUB_OUTPUT
          
          echo "üì¶ S3 Bucket: $S3_BUCKET_NAME"
          echo "üåê Website URL: $WEBSITE_URL"

      - name: Check workflow status
        run: |
          echo "üîç Workflow Summary:"
          echo "CI Result: ${{ needs.ci.result }}"
          echo "Infrastructure Changed: ${{ needs.check-changes.outputs.infra-changed }}"
          echo "Terraform Plan: ${{ needs.terraform-plan.result }}"
          echo "Infrastructure Deployment: ${{ needs.deploy-infrastructure.result }}"
          
          # The workflow succeeds if:
          # - CI passed AND
          # - Either no infra changes (skipped) OR infra was successfully deployed
          if [[ "${{ needs.ci.result }}" == "success" ]] && \
             ([[ "${{ needs.check-changes.outputs.infra-changed }}" == "false" ]] || \
              [[ "${{ needs.deploy-infrastructure.result }}" == "success" ]]); then
            echo "‚úÖ Infrastructure workflow completed successfully"
            exit 0
          else
            echo "‚ùå Infrastructure workflow failed"
            exit 1
          fi
