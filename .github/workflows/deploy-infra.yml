name: Deploy Infrastructure

on:
  workflow_call:
    inputs:
      environment:
        description: "Environment to deploy to (Production or Development)"
        required: false
        type: string
        default: "Production"
      dry_run:
        description: "Run terraform plan only (no apply)"
        required: false
        type: boolean
        default: false
    outputs:
      s3-bucket-name:
        description: "The S3 bucket name for the deployed infrastructure"
        value: ${{ jobs.infra-complete.outputs.s3-bucket-name }}
      website-url:
        description: "The website URL for the deployed infrastructure"
        value: ${{ jobs.infra-complete.outputs.website-url }}
      infra-changed:
        description: "Whether infrastructure was changed"
        value: ${{ jobs.infra-complete.outputs.infra-changed }}
      infra-deployed:
        description: "Whether infrastructure was successfully deployed"
        value: ${{ jobs.infra-complete.outputs.infra-deployed }}
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'Production'
        type: choice
        options:
          - Production
          - Development
      dry_run:
        description: 'Run terraform plan only (no apply)'
        required: false
        default: false
        type: boolean

permissions:
  id-token: write   # Required for OIDC
  contents: read    # Required for actions/checkout
  actions: read     # Required for reusable workflows

jobs:
  common-env:
    uses: ./.github/workflows/common-env.yml

  ci:
    needs: [common-env]
    uses: ./.github/workflows/ci.yml

  check-changes:
    needs: [common-env]
    runs-on: ubuntu-latest
    outputs:
      infra-changed: ${{ steps.changes.outputs.infra }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            infra:
              - 'infra/terraform/**'
              - '.github/workflows/deploy-infra.yml'

  terraform-plan:
    runs-on: ubuntu-latest
    needs: [common-env, check-changes]
    environment: ${{ inputs.environment || github.event.inputs.environment || 'Production' }}
    if: |
      (github.ref == 'refs/heads/main' || github.event_name == 'pull_request') &&
      (github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success') &&
      (needs.check-changes.outputs.infra-changed == 'true' || github.event_name == 'workflow_dispatch')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment slug
        id: set-env
        shell: bash
        run: |
          if [ -n "${{ vars.STAGE }}" ]; then
            ENV_SLUG_VAL='${{ vars.STAGE }}'
          elif [ -n "${STAGE}" ]; then
            ENV_SLUG_VAL="${STAGE}"
          else
            ENV_INPUT="${{ inputs.environment || github.event.inputs.environment || 'Production' }}"
            if [ "$ENV_INPUT" = "Production" ]; then
              ENV_SLUG_VAL="prod"
            else
              ENV_SLUG_VAL="dev"
            fi
          fi
          echo "ENV_SLUG=$ENV_SLUG_VAL" >> "$GITHUB_ENV"
          echo "VAR_FILE=terraform-${ENV_SLUG_VAL}.tfvars" >> "$GITHUB_ENV"
          echo "Using ENV_SLUG=$ENV_SLUG_VAL"

      - name: Compute base bucket name
        id: base-bucket
        shell: bash
        run: |
          BASE="${{ vars.S3_BUCKET_NAME }}"
          if [[ "$BASE" == *"-${ENV_SLUG}" ]]; then
            BASE="${BASE%-${ENV_SLUG}}"
          fi
          echo "BASE_BUCKET=$BASE" >> "$GITHUB_ENV"
          echo "Base bucket: $BASE"

      - name: Validate required secrets
        uses: ./.github/actions/validate-secrets
        with:
          s3-bucket-name: ${{ vars.S3_BUCKET_NAME }}
          s3-state-bucket-name: ${{ vars.S3_STATE_BUCKET_NAME }}
          aws-role-arn: ${{ secrets.AWS_ROLE_ARN }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ needs.common-env.outputs.terraform_version }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ needs.common-env.outputs.aws_region }}

      - name: Terraform Init
        id: init
        working-directory: infra/terraform
        run: |
          echo "Terraform state key: portfolio/${ENV_SLUG}/terraform.tfstate"
          terraform init \
            -backend-config="bucket=${{ vars.S3_STATE_BUCKET_NAME }}" \
            -backend-config="key=portfolio/${ENV_SLUG}/terraform.tfstate" \
            -backend-config="region=${{ needs.common-env.outputs.aws_region }}"

      - name: Terraform Format Check
        working-directory: infra/terraform
        run: terraform fmt -check

      - name: Terraform Validate
        working-directory: infra/terraform
        run: terraform validate

      - name: Terraform Plan
        working-directory: infra/terraform
        run: |
          if [ -f "${VAR_FILE}" ]; then
            terraform plan -var-file="${VAR_FILE}" -out=tfplan
          else
            echo "⚠️ ${VAR_FILE} not found. Planning with TF_VAR_* only."
            terraform plan -out=tfplan
          fi
        env:
          TF_VAR_bucket_name: ${{ env.BASE_BUCKET }}
          TF_VAR_environment: ${{ env.ENV_SLUG }}
          TF_VAR_github_repository: ${{ github.repository }}
          TF_VAR_create_iam_resources: true
          TF_VAR_use_oidc: true
          TF_VAR_domain_name: ${{ vars.DOMAIN_NAME || 'thomfilg.com' }}
          TF_VAR_subdomain_names: ${{ vars.SUBDOMAIN_NAMES || '["www.thomfilg.com"]' }}
          TF_VAR_create_ssl_certificate: ${{ vars.CREATE_SSL_CERTIFICATE || 'true' }}
          TF_VAR_create_cloudfront_distribution: ${{ vars.CREATE_CLOUDFRONT_DISTRIBUTION || 'true' }}
          TF_VAR_create_route53_records: ${{ vars.CREATE_ROUTE53_RECORDS || 'false' }}
          TF_VAR_hosted_zone_id: ${{ vars.HOSTED_ZONE_ID || '' }}
          TF_VAR_create_shared_resources: ${{ vars.CREATE_SHARED_RESOURCES || 'false' }}

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4 # ✅ Upload the plan file
        with:
          name: terraform-plan
          path: infra/terraform/tfplan

  deploy-infrastructure:
    runs-on: ubuntu-latest
    needs: [common-env, ci, terraform-plan, check-changes]
    if: |
      needs.ci.result == 'success' &&
      needs.terraform-plan.result == 'success' && 
      github.ref == 'refs/heads/main' && 
      (inputs.dry_run || github.event.inputs.dry_run) != 'true' &&
      (needs.check-changes.outputs.infra-changed == 'true' || github.event_name == 'workflow_dispatch')
    environment: ${{ inputs.environment || github.event.inputs.environment || 'Production' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment slug
        id: set-env
        shell: bash
        run: |
          if [ -n "${{ vars.STAGE }}" ]; then
            ENV_SLUG_VAL='${{ vars.STAGE }}'
          elif [ -n "${STAGE}" ]; then
            ENV_SLUG_VAL="${STAGE}"
          else
            ENV_INPUT="${{ inputs.environment || github.event.inputs.environment || 'Production' }}"
            if [ "$ENV_INPUT" = "Production" ]; then
              ENV_SLUG_VAL="prod"
            else
              ENV_SLUG_VAL="dev"
            fi
          fi
          echo "ENV_SLUG=$ENV_SLUG_VAL" >> "$GITHUB_ENV"
          echo "VAR_FILE=terraform-${ENV_SLUG_VAL}.tfvars" >> "$GITHUB_ENV"
          echo "Using ENV_SLUG=$ENV_SLUG_VAL"

      - name: Compute base bucket name
        id: base-bucket
        shell: bash
        run: |
          BASE="${{ vars.S3_BUCKET_NAME }}"
          if [[ "$BASE" == *"-${ENV_SLUG}" ]]; then
            BASE="${BASE%-${ENV_SLUG}}"
          fi
          echo "BASE_BUCKET=$BASE" >> "$GITHUB_ENV"
          echo "Base bucket: $BASE"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ needs.common-env.outputs.terraform_version }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ needs.common-env.outputs.aws_region }}
      
      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: infra/terraform

      - name: Terraform Init
        working-directory: infra/terraform
        run: |
          terraform init \
            -backend-config="bucket=${{ vars.S3_STATE_BUCKET_NAME }}" \
            -backend-config="key=portfolio/${ENV_SLUG}/terraform.tfstate" \
            -backend-config="region=${{ needs.common-env.outputs.aws_region }}"

      - name: Import existing S3 bucket (idempotent)
        working-directory: infra/terraform
        shell: bash
        env:
          TF_INPUT: "false"
          TF_VAR_bucket_name: ${{ env.BASE_BUCKET }}
          TF_VAR_environment: ${{ env.ENV_SLUG }}
          TF_VAR_github_repository: ${{ github.repository }}
          TF_VAR_create_iam_resources: true
          TF_VAR_use_oidc: true
          TF_VAR_domain_name: ${{ vars.DOMAIN_NAME || 'thomfilg.com' }}
          TF_VAR_subdomain_names: ${{ vars.SUBDOMAIN_NAMES || '["www.thomfilg.com"]' }}
          TF_VAR_create_ssl_certificate: ${{ vars.CREATE_SSL_CERTIFICATE || 'true' }}
          TF_VAR_create_cloudfront_distribution: ${{ vars.CREATE_CLOUDFRONT_DISTRIBUTION || 'true' }}
          TF_VAR_create_route53_records: ${{ vars.CREATE_ROUTE53_RECORDS || 'false' }}
          TF_VAR_hosted_zone_id: ${{ vars.HOSTED_ZONE_ID || '' }}
          TF_VAR_create_shared_resources: ${{ vars.CREATE_SHARED_RESOURCES || 'false' }}
        run: |
          set -euo pipefail
          BUCKET="${BASE_BUCKET}-${ENV_SLUG}"
          echo "Checking for existing bucket: $BUCKET"
          if aws s3api head-bucket --bucket "$BUCKET" >/dev/null 2>&1; then
            echo "Bucket exists, attempting terraform import..."
            terraform import -no-color -input=false aws_s3_bucket.portfolio_bucket "$BUCKET" || true
          else
            echo "Bucket does not exist or not accessible; skipping import."
          fi

      - name: Re-plan for safety
        working-directory: infra/terraform
        run: |
          if [ -f "${VAR_FILE}" ]; then
            terraform plan -var-file="${VAR_FILE}" -out=tfplan
          else
            terraform plan -out=tfplan
          fi
        env:
          TF_VAR_bucket_name: ${{ env.BASE_BUCKET }}
          TF_VAR_environment: ${{ env.ENV_SLUG }}
          TF_VAR_github_repository: ${{ github.repository }}
          TF_VAR_create_iam_resources: true
          TF_VAR_use_oidc: true
          TF_VAR_domain_name: ${{ vars.DOMAIN_NAME || 'thomfilg.com' }}
          TF_VAR_subdomain_names: ${{ vars.SUBDOMAIN_NAMES || '["www.thomfilg.com"]' }}
          TF_VAR_create_ssl_certificate: ${{ vars.CREATE_SSL_CERTIFICATE || 'true' }}
          TF_VAR_create_cloudfront_distribution: ${{ vars.CREATE_CLOUDFRONT_DISTRIBUTION || 'true' }}
          TF_VAR_create_route53_records: ${{ vars.CREATE_ROUTE53_RECORDS || 'false' }}
          TF_VAR_hosted_zone_id: ${{ vars.HOSTED_ZONE_ID || '' }}
          TF_VAR_create_shared_resources: ${{ vars.CREATE_SHARED_RESOURCES || 'false' }}

      - name: Terraform Apply
        working-directory: infra/terraform
        run: terraform apply -auto-approve tfplan

      - name: Display infrastructure info
        working-directory: infra/terraform
        run: |
          echo "🏗️ Infrastructure deployment successful!"
          echo "🌍 Environment: ${{ inputs.environment || github.event.inputs.environment || 'Production' }}"
          echo "S3 Bucket: $(terraform output -raw s3_bucket_name)"
          echo "Website URL: $(terraform output -raw website_url)"
          echo "📝 Note: Application code needs to be deployed separately."

  # Summary job that always runs to provide consistent status for dependent workflows
  infra-complete:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || github.event.inputs.environment || 'Production' }}
    needs: [common-env, ci, check-changes, terraform-plan, deploy-infrastructure]
    if: always()
    outputs:
      infra-changed: ${{ needs.check-changes.outputs.infra-changed }}
      infra-deployed: ${{ needs.deploy-infrastructure.result == 'success' }}
      ci-success: ${{ needs.ci.result == 'success' }}
      s3-bucket-name: ${{ steps.get-outputs.outputs.s3-bucket-name }}
      website-url: ${{ steps.get-outputs.outputs.website-url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ needs.common-env.outputs.terraform_version }}
          terraform_wrapper: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ needs.common-env.outputs.aws_region }}

      - name: Set environment slug
        id: set-env
        shell: bash
        run: |
          if [ -n "${{ vars.STAGE }}" ]; then
            ENV_SLUG_VAL='${{ vars.STAGE }}'
          elif [ -n "${STAGE}" ]; then
            ENV_SLUG_VAL="${STAGE}"
          else
            ENV_INPUT="${{ inputs.environment || github.event.inputs.environment || 'Production' }}"
            if [ "$ENV_INPUT" = "Production" ]; then
              ENV_SLUG_VAL="prod"
            else
              ENV_SLUG_VAL="dev"
            fi
          fi
          echo "ENV_SLUG=$ENV_SLUG_VAL" >> "$GITHUB_ENV"
          echo "Using ENV_SLUG=$ENV_SLUG_VAL"

      - name: Terraform Init and Get Outputs (with fallbacks)
        id: get-outputs
        working-directory: infra/terraform
        shell: bash
        run: |
          set -euo pipefail
          REGION=${{ needs.common-env.outputs.aws_region }}

          # Resolve base bucket (strip stage suffix if present)
          BASE="${{ vars.S3_BUCKET_NAME }}"
          if [[ "$BASE" == *"-${ENV_SLUG}" ]]; then
            BASE="${BASE%-${ENV_SLUG}}"
          fi
          FALLBACK_BUCKET="${BASE}-${ENV_SLUG}"
          FALLBACK_URL="http://${FALLBACK_BUCKET}.s3-website-${REGION}.amazonaws.com"

          # Try to init Terraform to read from state (may fail if bucket/state not created)
          if terraform init \
            -backend-config="bucket=${{ vars.S3_STATE_BUCKET_NAME }}" \
            -backend-config="key=portfolio/${ENV_SLUG}/terraform.tfstate" \
            -backend-config="region=${REGION}" >/dev/null; then
            S3_BUCKET_NAME=$(terraform output -raw s3_bucket_name 2>/dev/null || true)
            WEBSITE_URL=$(terraform output -raw website_url 2>/dev/null || true)
          else
            S3_BUCKET_NAME=""
            WEBSITE_URL=""
          fi

          # Apply fallbacks if outputs are empty
          S3_BUCKET_NAME="${S3_BUCKET_NAME:-$FALLBACK_BUCKET}"
          WEBSITE_URL="${WEBSITE_URL:-$FALLBACK_URL}"

          echo "s3-bucket-name=${S3_BUCKET_NAME}" >> "$GITHUB_OUTPUT"
          echo "website-url=${WEBSITE_URL}" >> "$GITHUB_OUTPUT"

          echo "📦 S3 Bucket: ${S3_BUCKET_NAME}"
          echo "🌐 Website URL: ${WEBSITE_URL}"

      - name: Check workflow status
        run: |
          echo "🔍 Workflow Summary:"
          echo "CI Result: ${{ needs.ci.result }}"
          echo "Infrastructure Changed: ${{ needs.check-changes.outputs.infra-changed }}"
          echo "Terraform Plan: ${{ needs.terraform-plan.result }}"
          echo "Infrastructure Deployment: ${{ needs.deploy-infrastructure.result }}"
          
          # The workflow succeeds if:
          # - CI passed AND
          # - Either no infra changes (skipped) OR infra was successfully deployed
          if [[ "${{ needs.ci.result }}" == "success" ]] && \
             ([[ "${{ needs.check-changes.outputs.infra-changed }}" == "false" ]] || \
              [[ "${{ needs.deploy-infrastructure.result }}" == "success" ]]); then
            echo "✅ Infrastructure workflow completed successfully"
            exit 0
          else
            echo "❌ Infrastructure workflow failed"
            exit 1
          fi
