name: Deploy Infrastructure

on:
  workflow_call:
    inputs:
      environment:
        description: "Environment to deploy to (Production or Development)"
        required: false
        type: string
        default: "Production"
      dry_run:
        description: "Run terraform plan only (no apply)"
        required: false
        type: boolean
        default: false
    outputs:
      s3-bucket-name:
        description: "The S3 bucket name for the deployed infrastructure"
        value: ${{ jobs.infra-complete.outputs.s3-bucket-name }}
      website-url:
        description: "The website URL for the deployed infrastructure"
        value: ${{ jobs.infra-complete.outputs.website-url }}
      infra-changed:
        description: "Whether infrastructure was changed"
        value: ${{ jobs.infra-complete.outputs.infra-changed }}
      infra-deployed:
        description: "Whether infrastructure was successfully deployed"
        value: ${{ jobs.infra-complete.outputs.infra-deployed }}
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'Production'
        type: choice
        options:
          - Production
          - Development
      dry_run:
        description: 'Run terraform plan only (no apply)'
        required: false
        default: false
        type: boolean

permissions:
  id-token: write   # Required for OIDC
  contents: read    # Required for actions/checkout
  actions: read     # Required for reusable workflows

jobs:
  common-env:
    uses: ./.github/workflows/common-env.yml

  ci:
    needs: [common-env]
    uses: ./.github/workflows/ci.yml

  check-changes:
    needs: [common-env]
    runs-on: ubuntu-latest
    outputs:
      infra-changed: ${{ steps.changes.outputs.infra }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            infra:
              - 'infra/terraform/**'
              - '.github/workflows/deploy-infra.yml'

  terraform-plan:
    runs-on: ubuntu-latest
    needs: [common-env, check-changes]
    environment: ${{ inputs.environment || github.event.inputs.environment || 'Production' }}
    if: |
      (github.ref == 'refs/heads/main' || github.event_name == 'pull_request') &&
      (github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success') &&
      (needs.check-changes.outputs.infra-changed == 'true' || github.event_name == 'workflow_dispatch')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Compute base bucket name
        id: base-bucket
        shell: bash
        run: |
          BASE="${{ vars.S3_BUCKET_NAME }}-${{ vars.STAGE }}"
          echo "BASE_BUCKET=$BASE" >> "$GITHUB_ENV"
          echo "Base bucket: $BASE"

      - name: Validate required secrets
        uses: ./.github/actions/validate-secrets
        with:
          s3-bucket-name: ${{ vars.S3_BUCKET_NAME }}
          s3-state-bucket-name: ${{ vars.S3_STATE_BUCKET_NAME }}
          aws-role-arn: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ needs.common-env.outputs.aws_region }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ needs.common-env.outputs.terraform_version }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ needs.common-env.outputs.aws_region }}

      - name: Terraform Init
        id: init
        working-directory: infra/terraform
        run: |
          echo "Terraform state key: portfolio/${{ vars.STAGE }}/terraform.tfstate"
          terraform init \
            -backend-config="bucket=${{ vars.S3_STATE_BUCKET_NAME }}" \
            -backend-config="key=portfolio/${{ vars.STAGE }}/terraform.tfstate" \
            -backend-config="region=${{ needs.common-env.outputs.aws_region }}"

      - name: Terraform Format Check
        working-directory: infra/terraform
        run: terraform fmt -check

      - name: Terraform Validate
        working-directory: infra/terraform
        run: terraform validate

      - name: Check ACM Certificate Status
        id: check-cert
        shell: bash
        run: |
          # Check if we should use a custom domain
          USE_CUSTOM_DOMAIN="false"
          if [ "${{ vars.CREATE_SSL_CERTIFICATE }}" = "true" ] && [ -n "${{ vars.DOMAIN_NAME }}" ]; then
            USE_CUSTOM_DOMAIN="true"
          fi
          echo "USE_CUSTOM_DOMAIN=$USE_CUSTOM_DOMAIN" >> "$GITHUB_ENV"
          
          if [ "$USE_CUSTOM_DOMAIN" = "true" ]; then
            echo "🔍 Checking for existing ACM certificate for ${{ vars.DOMAIN_NAME }}..."
            CERT_ARN=$(aws acm list-certificates --region us-east-1 \
              --query "CertificateSummaryList[?DomainName=='${{ vars.DOMAIN_NAME }}' && Status=='ISSUED'].CertificateArn | [0]" \
              --output text 2>/dev/null || echo "")
            
            if [ -n "$CERT_ARN" ] && [ "$CERT_ARN" != "None" ]; then
              echo "✅ Found valid certificate: $CERT_ARN"
              echo "EXISTING_CERT_ARN=$CERT_ARN" >> "$GITHUB_ENV"
            else
              echo "⚠️ No valid certificate found for ${{ vars.DOMAIN_NAME }}"
              echo "📝 Certificate will be created if create_shared_resources=true"
            fi
          else
            echo "ℹ️ Not using custom domain - CloudFront will use default certificate"
          fi

      - name: Terraform Plan
        working-directory: infra/terraform
        run: |
          if [ -f "${VAR_FILE}" ]; then
            terraform plan -var-file="${VAR_FILE}" -out=tfplan
          else
            echo "⚠️ ${VAR_FILE} not found. Planning with TF_VAR_* only."
            terraform plan -out=tfplan
          fi
        env:
          TF_VAR_bucket_name: ${{ env.BASE_BUCKET }}
          TF_VAR_environment: ${{ vars.STAGE || 'Production' }}
          TF_VAR_github_repository: ${{ github.repository }}
          TF_VAR_create_iam_resources: ${{ vars.CREATE_IAM_RESOURCES || 'true' }}
          TF_VAR_use_oidc: ${{ vars.USE_OIDC || 'true' }}
          TF_VAR_domain_name: ${{ vars.DOMAIN_NAME || '' }}
          TF_VAR_subdomain_names: ${{ vars.SUBDOMAIN_NAMES || '[]' }}
          TF_VAR_create_ssl_certificate: ${{ env.USE_CUSTOM_DOMAIN }}
          TF_VAR_create_cloudfront_distribution: ${{ vars.CREATE_CLOUDFRONT_DISTRIBUTION || 'true' }}
          TF_VAR_create_route53_records: ${{ vars.CREATE_ROUTE53_RECORDS || 'false' }}
          TF_VAR_hosted_zone_id: ${{ vars.HOSTED_ZONE_ID || '' }}
          TF_VAR_create_shared_resources: ${{ vars.CREATE_SHARED_RESOURCES || 'false' }}
          TF_VAR_resource_tag_environment: ${{ vars.RESOURCE_TAG_ENVIRONMENT || 'frontend' }}

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: infra/terraform/tfplan

  deploy-infrastructure:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [common-env, ci, terraform-plan, check-changes]
    if: |
      needs.ci.result == 'success' &&
      needs.terraform-plan.result == 'success' && 
      github.ref == 'refs/heads/main' && 
      (inputs.dry_run || github.event.inputs.dry_run) != 'true' &&
      (needs.check-changes.outputs.infra-changed == 'true' || github.event_name == 'workflow_dispatch')
    environment: ${{ inputs.environment || github.event.inputs.environment || 'Production' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Compute base bucket name
        id: base-bucket
        shell: bash
        run: |
          BASE="${{ vars.S3_BUCKET_NAME }}-${{ vars.STAGE }}"
          echo "BASE_BUCKET=$BASE" >> "$GITHUB_ENV"
          echo "Base bucket: $BASE"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ needs.common-env.outputs.terraform_version }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ needs.common-env.outputs.aws_region }}
      
      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: infra/terraform

      - name: Terraform Init
        working-directory: infra/terraform
        run: |
          terraform init \
            -backend-config="bucket=${{ vars.S3_STATE_BUCKET_NAME }}" \
            -backend-config="key=portfolio/${{ vars.STAGE }}/terraform.tfstate" \
            -backend-config="region=${{ needs.common-env.outputs.aws_region }}"

      - name: Debug environment and variables
        run: |
          echo "🔍 Debug Info:"
          echo "STAGE: ${{ vars.STAGE }}"
          echo "BASE_BUCKET: ${BASE_BUCKET}"  
          echo "Expected bucket name: ${BASE_BUCKET}-${{ vars.STAGE }}"
          echo "CREATE_SHARED_RESOURCES: ${{ vars.CREATE_SHARED_RESOURCES || 'false' }}"
          echo "CREATE_SSL_CERTIFICATE: ${{ vars.CREATE_SSL_CERTIFICATE || 'false' }}"
          echo "DOMAIN_NAME: ${{ vars.DOMAIN_NAME || '(not set)' }}"
          echo "CREATE_CLOUDFRONT_DISTRIBUTION: ${{ vars.CREATE_CLOUDFRONT_DISTRIBUTION || 'true' }}"

      - name: Check ACM Certificate Status
        id: check-cert
        shell: bash
        run: |
          USE_CUSTOM_DOMAIN="false"
          if [ "${{ vars.CREATE_SSL_CERTIFICATE }}" = "true" ] && [ -n "${{ vars.DOMAIN_NAME }}" ]; then
            USE_CUSTOM_DOMAIN="true"
          fi
          echo "USE_CUSTOM_DOMAIN=$USE_CUSTOM_DOMAIN" >> "$GITHUB_ENV"

      - name: Clean up conflicting CloudFront distributions
        shell: bash
        run: |
          if [ "${{ vars.CREATE_CLOUDFRONT_DISTRIBUTION }}" = "true" ] && [ "$USE_CUSTOM_DOMAIN" = "true" ]; then
            echo "🔍 Checking for conflicting CloudFront distributions..."
            DOMAIN="${{ vars.DOMAIN_NAME }}"
            
            # Find distributions using our domain as an alias
            CONFLICTING_DIST=$(aws cloudfront list-distributions \
              --query "DistributionList.Items[?contains(Aliases.Items || \`[]\`, '$DOMAIN')].Id | [0]" \
              --output text 2>/dev/null || echo "")
            
            if [ -n "$CONFLICTING_DIST" ] && [ "$CONFLICTING_DIST" != "None" ]; then
              echo "⚠️ Found conflicting distribution: $CONFLICTING_DIST"
              # Check if this is our managed distribution
              DIST_TAGS=$(aws cloudfront list-tags-for-resource \
                --resource "arn:aws:cloudfront::$(aws sts get-caller-identity --query Account --output text):distribution/$CONFLICTING_DIST" \
                --query "Tags.Items[?Key=='Environment'].Value | [0]" \
                --output text 2>/dev/null || echo "")
              
              if [ "$DIST_TAGS" = "${{ vars.resource_tag_environment || 'frontend' }}" ]; then
                echo "ℹ️ Distribution is managed by our Terraform - will be updated"
              else
                echo "❌ Distribution is not managed by our Terraform"
                echo "Please manually remove the alias from distribution $CONFLICTING_DIST"
              fi
            else
              echo "✅ No conflicting CloudFront distributions found"
            fi
          fi

      - name: Import existing S3 bucket (idempotent)
        working-directory: infra/terraform
        shell: bash
        env:
          TF_INPUT: "false"
          TF_VAR_bucket_name: ${{ env.BASE_BUCKET }}
          TF_VAR_environment: ${{ vars.STAGE }}
          TF_VAR_github_repository: ${{ github.repository }}
          TF_VAR_create_iam_resources: true
          TF_VAR_use_oidc: true
          TF_VAR_domain_name: ${{ vars.DOMAIN_NAME || '' }}
          TF_VAR_subdomain_names: ${{ vars.SUBDOMAIN_NAMES || '[]' }}
          TF_VAR_create_ssl_certificate: ${{ env.USE_CUSTOM_DOMAIN }}
          TF_VAR_create_cloudfront_distribution: ${{ vars.CREATE_CLOUDFRONT_DISTRIBUTION || 'true' }}
          TF_VAR_create_route53_records: ${{ vars.CREATE_ROUTE53_RECORDS || 'false' }}
          TF_VAR_hosted_zone_id: ${{ vars.HOSTED_ZONE_ID || '' }}
          TF_VAR_create_shared_resources: ${{ vars.CREATE_SHARED_RESOURCES || 'false' }}
        run: |
          set -euo pipefail
          
          BUCKET="${BASE_BUCKET}-${{ vars.STAGE }}"
          echo "Checking for existing bucket: $BUCKET"
          if aws s3api head-bucket --bucket "$BUCKET" >/dev/null 2>&1; then
            echo "Bucket exists, checking if already imported..."
            if ! terraform state show aws_s3_bucket.portfolio_bucket >/dev/null 2>&1; then
              echo "Bucket not in state, attempting terraform import..."
              terraform import -no-color -input=false aws_s3_bucket.portfolio_bucket "$BUCKET" || true
            else
              echo "Bucket already imported to state."
            fi
          else
            echo "Bucket does not exist or not accessible; skipping import."
          fi

      - name: Import existing CloudFront resources (idempotent)
        working-directory: infra/terraform
        shell: bash
        env:
          TF_INPUT: "false"
        run: |
          set -euo pipefail
          
          # Only import if we're managing CloudFront
          if [ "${{ vars.CREATE_CLOUDFRONT_DISTRIBUTION }}" != "true" ]; then
            echo "CloudFront distribution management disabled, skipping imports"
            exit 0
          fi
          
          # Import OAC if it exists
          OAC_NAME="portfolio-oac-${{ vars.STAGE }}"
          echo "Checking for existing CloudFront OAC: $OAC_NAME"
          OAC_ID=$(aws cloudfront list-origin-access-controls --query "OriginAccessControlList.Items[?Name=='${OAC_NAME}'].Id" --output text 2>/dev/null || true)
          if [ -n "$OAC_ID" ] && [ "$OAC_ID" != "None" ]; then
            echo "Found OAC ID: $OAC_ID. Checking if already imported..."
            if ! terraform state show aws_cloudfront_origin_access_control.portfolio_oac[0] >/dev/null 2>&1; then
              echo "OAC not in state, importing..."
              terraform import -no-color -input=false 'aws_cloudfront_origin_access_control.portfolio_oac[0]' "$OAC_ID" || true
            else
              echo "OAC already imported to state."
            fi
          else
            echo "No existing OAC found; will be created."
          fi
          
          # Import CloudFront distribution if it exists
          BUCKET="${BASE_BUCKET}-${{ vars.STAGE }}"
          echo "Checking for existing CloudFront distribution with origin: $BUCKET"
          DIST_ID=$(aws cloudfront list-distributions \
            --query "DistributionList.Items[?contains(Origins.Items[*].DomainName, '${BUCKET}')].Id | [0]" \
            --output text 2>/dev/null || true)
          
          if [ -n "$DIST_ID" ] && [ "$DIST_ID" != "None" ]; then
            echo "Found Distribution ID: $DIST_ID. Checking if already imported..."
            if ! terraform state show 'aws_cloudfront_distribution.portfolio_distribution[0]' >/dev/null 2>&1; then
              echo "Distribution not in state, importing..."
              terraform import -no-color -input=false 'aws_cloudfront_distribution.portfolio_distribution[0]' "$DIST_ID" || true
            else
              echo "Distribution already imported to state."
            fi
          else
            echo "No existing Distribution found; will be created."
          fi

      - name: Re-plan for safety
        working-directory: infra/terraform
        run: |
          if [ -f "${VAR_FILE}" ]; then
            terraform plan -var-file="${VAR_FILE}" -out=tfplan
          else
            terraform plan -out=tfplan
          fi
        env:
          TF_VAR_bucket_name: ${{ env.BASE_BUCKET }}
          TF_VAR_environment: ${{ vars.STAGE }}
          TF_VAR_github_repository: ${{ github.repository }}
          TF_VAR_create_iam_resources: true
          TF_VAR_use_oidc: true
          TF_VAR_domain_name: ${{ vars.DOMAIN_NAME || '' }}
          TF_VAR_subdomain_names: ${{ vars.SUBDOMAIN_NAMES || '[]' }}
          TF_VAR_create_ssl_certificate: ${{ env.USE_CUSTOM_DOMAIN }}
          TF_VAR_create_cloudfront_distribution: ${{ vars.CREATE_CLOUDFRONT_DISTRIBUTION || 'true' }}
          TF_VAR_create_route53_records: ${{ vars.CREATE_ROUTE53_RECORDS || 'false' }}
          TF_VAR_hosted_zone_id: ${{ vars.HOSTED_ZONE_ID || '' }}
          TF_VAR_create_shared_resources: ${{ vars.CREATE_SHARED_RESOURCES || 'false' }}

      - name: Terraform Apply
        working-directory: infra/terraform
        run: |
          echo "🚀 Starting Terraform Apply..."
          if ! terraform apply -auto-approve tfplan; then
            echo "❌ Terraform Apply failed!"
            echo "📋 Current Terraform state:"
            terraform state list || true
            echo "🔍 Terraform show output:"  
            terraform show || true
            exit 1
          fi
          echo "✅ Terraform Apply completed successfully!"

      - name: Display infrastructure info
        working-directory: infra/terraform
        run: |
          echo "🏗️ Infrastructure deployment successful!"
          echo "🌍 Environment: ${{ inputs.environment || github.event.inputs.environment || 'Production' }}"
          echo "S3 Bucket: $(terraform output -raw s3_bucket_name)"
          echo "Website URL: $(terraform output -raw website_url)"
          echo "📝 Note: Application code needs to be deployed separately."

  # Summary job that always runs to provide consistent status for dependent workflows
  infra-complete:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || github.event.inputs.environment || 'Production' }}
    needs: [common-env, ci, check-changes, terraform-plan, deploy-infrastructure]
    if: always()
    outputs:
      infra-changed: ${{ needs.check-changes.outputs.infra-changed }}
      infra-deployed: ${{ needs.deploy-infrastructure.result == 'success' }}
      ci-success: ${{ needs.ci.result == 'success' }}
      s3-bucket-name: ${{ steps.get-outputs.outputs.s3-bucket-name }}
      website-url: ${{ steps.get-outputs.outputs.website-url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ needs.common-env.outputs.terraform_version }}
          terraform_wrapper: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ needs.common-env.outputs.aws_region }}

      - name: Terraform Init and Get Outputs (with fallbacks)
        id: get-outputs
        working-directory: infra/terraform
        shell: bash
        run: |
          set -euo pipefail
          REGION=${{ needs.common-env.outputs.aws_region }}

          # Resolve base bucket (strip stage suffix if present)
          BASE="${{ vars.S3_BUCKET_NAME }}-${{ vars.STAGE }}"
          FALLBACK_URL="http://${BASE}.s3-website-${REGION}.amazonaws.com"

          # Try to init Terraform to read from state (may fail if bucket/state not created)
          if terraform init \
            -backend-config="bucket=${{ vars.S3_STATE_BUCKET_NAME }}" \
            -backend-config="key=portfolio/${{ vars.STAGE }}/terraform.tfstate" \
            -backend-config="region=${REGION}" >/dev/null 2>&1; then
            S3_BUCKET_NAME=$(terraform output -raw s3_bucket_name 2>/dev/null || echo "$BASE")
            WEBSITE_URL=$(terraform output -raw website_url 2>/dev/null || echo "$FALLBACK_URL")
          else
            S3_BUCKET_NAME="$BASE"
            WEBSITE_URL="$FALLBACK_URL"
          fi

          echo "s3-bucket-name=${S3_BUCKET_NAME}" >> "$GITHUB_OUTPUT"
          echo "website-url=${WEBSITE_URL}" >> "$GITHUB_OUTPUT"

          echo "📦 S3 Bucket: ${S3_BUCKET_NAME}"
          echo "🌐 Website URL: ${WEBSITE_URL}"

      - name: Check workflow status
        run: |
          echo "🔍 Workflow Summary:"
          echo "CI Result: ${{ needs.ci.result }}"
          echo "Infrastructure Changed: ${{ needs.check-changes.outputs.infra-changed }}"
          echo "Terraform Plan: ${{ needs.terraform-plan.result }}"
          echo "Infrastructure Deployment: ${{ needs.deploy-infrastructure.result }}"
          
          # The workflow succeeds if:
          # - CI passed AND
          # - Either no infra changes (skipped) OR infra was successfully deployed
          if [[ "${{ needs.ci.result }}" == "success" ]] && \
             ([[ "${{ needs.check-changes.outputs.infra-changed }}" == "false" ]] || \
              [[ "${{ needs.deploy-infrastructure.result }}" == "success" ]]); then
            echo "✅ Infrastructure workflow completed successfully"
            exit 0
          else
            echo "❌ Infrastructure workflow failed"
            exit 1
          fi