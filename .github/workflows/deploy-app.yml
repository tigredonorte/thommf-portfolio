name: Deploy Application

env:
  AWS_REGION: ${{ vars.AWS_REGION || 'us-east-1' }}
  TERRAFORM_VERSION: ${{ vars.TERRAFORM_VERSION || '1.7.0' }}

on:
  push:
    branches: [main]
    paths:
      - 'infra/**'
      - 'apps/**'
      - 'libs/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - 'nx.json'
      - 'tsconfig*.json'
      - '.github/workflows/**'
      - 'infra/**'
  workflow_run:
    workflows: ["Deploy Infrastructure"]
    types: [completed]
    branches: [main]
  workflow_dispatch: # Allow manual trigger
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'Production'
        type: choice
        options:
          - Production
          - Development

permissions:
  id-token: write # Required for OIDC
  contents: read # Required for actions/checkout
  actions: read # Required for reusable workflows

jobs:
  # Deploy infrastructure first if needed (includes CI)
  infrastructure:
    if: |
      (github.event_name != 'pull_request' || (vars.DEPLOY_ON_PR == 'true' && github.ref == 'refs/heads/main'))
    uses: ./.github/workflows/deploy-infra.yml
    secrets: inherit

  # Deploy the application to S3
  deploy:
    needs: [infrastructure]
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'Production' }}
    if: |
      needs.infrastructure.result == 'success' &&
      (github.event_name != 'pull_request' || (vars.DEPLOY_ON_PR == 'true' && github.ref == 'refs/heads/main'))
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm

      - name: Build application
        run: |
          # Build all apps in production mode, excluding e2e tests
          npx nx run-many --target=build --configuration=production --all --exclude="*-e2e"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Sync files to S3
        run: |
          # Use the bucket name directly from the repository/environment variable
          BUCKET_NAME="${{ vars.S3_BUCKET_NAME }}"
          echo "üì¶ Using S3 bucket: $BUCKET_NAME"
          
          # Sync container app files to root
          echo "Syncing container app to root..."
          aws s3 sync apps/container/dist/ s3://$BUCKET_NAME/ --delete
          
          # Sync all micro-frontend apps to their respective subdirectories
          for app_dir in apps/*/; do
            app_name=$(basename "$app_dir")
            # Skip container app (already synced to root) and e2e apps
            if [[ "$app_name" != "container" && "$app_name" != *"-e2e" ]]; then
              if [[ -d "apps/$app_name/dist" ]]; then
                echo "Syncing $app_name micro-frontend..."
                aws s3 sync "apps/$app_name/dist/" "s3://$BUCKET_NAME/$app_name/"
              fi
            fi
          done

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Invalidate CloudFront Cache
        run: |
          # Check if CloudFront distribution exists by trying to get outputs from infrastructure
          echo "üîÑ Checking for CloudFront distribution..."
          
          # Try to get CloudFront distribution ID from Terraform outputs
          # We'll need to set up the Terraform environment to get outputs
          cd infra/terraform
          
          # Initialize Terraform to read state
          ENVIRONMENT_NAME=${{ github.event.inputs.environment || 'Production' }}
          terraform init \
            -backend-config="bucket=${{ vars.S3_STATE_BUCKET_NAME }}" \
            -backend-config="key=portfolio/${ENVIRONMENT_NAME,,}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"
          
          # Get CloudFront distribution ID if it exists
          DISTRIBUTION_ID=$(terraform output -raw cloudfront_distribution_id 2>/dev/null || echo "")
          
          if [ ! -z "$DISTRIBUTION_ID" ] && [ "$DISTRIBUTION_ID" != "null" ]; then
            echo "‚òÅÔ∏è Found CloudFront distribution: $DISTRIBUTION_ID"
            echo "üîÑ Creating CloudFront invalidation..."
            INVALIDATION_ID=$(aws cloudfront create-invalidation \
              --distribution-id "$DISTRIBUTION_ID" \
              --paths "/*" \
              --query 'Invalidation.Id' \
              --output text)
            echo "‚úÖ CloudFront invalidation created: $INVALIDATION_ID"
            echo "‚è≥ Invalidation may take 5-15 minutes to complete"
          else
            echo "‚ÑπÔ∏è No CloudFront distribution found - skipping cache invalidation"
          fi
        env:
          TF_VAR_bucket_name: ${{ vars.S3_BUCKET_NAME }}
          TF_VAR_environment: ${{ github.event.inputs.environment || 'Production' }}
          TF_VAR_github_repository: ${{ github.repository }}
          TF_VAR_create_iam_resources: true
          TF_VAR_use_oidc: true
          TF_VAR_domain_name: ${{ vars.DOMAIN_NAME || 'thomfilg.com' }}
          TF_VAR_subdomain_names: ${{ vars.SUBDOMAIN_NAMES || '["www.thomfilg.com"]' }}
          TF_VAR_create_ssl_certificate: ${{ vars.CREATE_SSL_CERTIFICATE || 'true' }}
          TF_VAR_create_cloudfront_distribution: ${{ vars.CREATE_CLOUDFRONT_DISTRIBUTION || 'true' }}
          TF_VAR_create_route53_records: ${{ vars.CREATE_ROUTE53_RECORDS || 'false' }}
          TF_VAR_hosted_zone_id: ${{ vars.HOSTED_ZONE_ID || '' }}

      - name: Get website URL
        id: get-url
        run: |
          # Use URL from infrastructure outputs or construct from bucket name
          WEBSITE_URL="${{ needs.infrastructure.outputs.website-url }}"
          if [ -z "$WEBSITE_URL" ]; then
            BUCKET_NAME="${{ needs.infrastructure.outputs.s3-bucket-name }}"
            if [ -z "$BUCKET_NAME" ]; then
              BUCKET_NAME="${{ vars.S3_BUCKET_NAME }}"
            fi
            WEBSITE_URL="http://$BUCKET_NAME.s3-website-${{ env.AWS_REGION }}.amazonaws.com"
          fi
          echo "website-url=$WEBSITE_URL" >> $GITHUB_OUTPUT

      - name: Display deployment info
        run: |
          echo "üéâ Application deployment successful!"
          echo "üåç Environment: ${{ github.event.inputs.environment || 'Production' }}"
          BUCKET_NAME="${{ needs.infrastructure.outputs.s3-bucket-name }}"
          if [ -z "$BUCKET_NAME" ]; then
            BUCKET_NAME="${{ vars.S3_BUCKET_NAME }}"
          fi
          echo "üì¶ App files synced to S3 bucket: $BUCKET_NAME"
          
          # Show both S3 website URL and custom domain URLs
          echo "üåê S3 Website URL: ${{ steps.get-url.outputs.website-url }}"
          
          # Try to get custom domain URLs from Terraform outputs
          cd infra/terraform
          ENVIRONMENT_NAME=${{ github.event.inputs.environment || 'Production' }}
          terraform init -backend-config="bucket=${{ vars.S3_STATE_BUCKET_NAME }}" -backend-config="key=portfolio/${ENVIRONMENT_NAME,,}/terraform.tfstate" -backend-config="region=${{ env.AWS_REGION }}" > /dev/null 2>&1
          
          HTTPS_URL=$(terraform output -raw https_website_url 2>/dev/null || echo "")
          WWW_URL=$(terraform output -raw www_website_url 2>/dev/null || echo "")
          
          if [ ! -z "$HTTPS_URL" ] && [ "$HTTPS_URL" != "null" ]; then
            echo "üîí Custom Domain: $HTTPS_URL"
          fi
          if [ ! -z "$WWW_URL" ] && [ "$WWW_URL" != "null" ]; then
            echo "üîí WWW Domain: $WWW_URL"
          fi
          
          # Show CloudFront distribution URL if available
          CLOUDFRONT_DOMAIN=$(terraform output -raw cloudfront_domain_name 2>/dev/null || echo "")
          if [ ! -z "$CLOUDFRONT_DOMAIN" ] && [ "$CLOUDFRONT_DOMAIN" != "null" ]; then
            echo "‚òÅÔ∏è CloudFront URL: https://$CLOUDFRONT_DOMAIN"
          fi