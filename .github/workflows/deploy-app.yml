name: Deploy Application

on:
  push:
    branches: [main]
    paths:
      - 'infra/**'
      - 'apps/**'
      - 'libs/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - 'nx.json'
      - 'tsconfig*.json'
      - '.github/workflows/**'
  workflow_run:
    workflows: ["Deploy Infrastructure"]
    types: [completed]
    branches: [main]
  workflow_dispatch: # Allow manual trigger
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'Production'
        type: choice
        options:
          - Production
          - Development

permissions:
  id-token: write # Required for OIDC
  contents: read # Required for actions/checkout
  actions: read # Required for reusable workflows

jobs:
  common-env:
    uses: ./.github/workflows/common-env.yml

  # Deploy infrastructure first if needed (includes CI)
  infrastructure:
    needs: [common-env]
    if: |
      (github.event_name != 'pull_request' || (needs.common-env.outputs.deploy_on_pr == 'true' && github.ref == 'refs/heads/main'))
    uses: ./.github/workflows/deploy-infra.yml
    with:
      environment: ${{ github.event.inputs.environment || 'Production' }}
      dry_run: false
    secrets: inherit

  # Deploy the application to S3
  deploy:
    needs: [common-env, infrastructure]
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'Production' }}
    if: |
      needs.infrastructure.result == 'success' &&
      (github.event_name != 'pull_request' || (needs.common-env.outputs.deploy_on_pr == 'true' && github.ref == 'refs/heads/main'))
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm

      - name: Build application
        run: |
          # Build all apps in production mode, excluding e2e tests
          npx nx run-many --target=build --configuration=production --all --exclude="*-e2e"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ needs.common-env.outputs.aws_region }}

      - name: Sync files to S3
        run: |
          # Get the bucket name from infrastructure job outputs or fallback to variable with env suffix
          BUCKET_NAME="${{ needs.infrastructure.outputs.s3-bucket-name }}"
          if [ -z "$BUCKET_NAME" ]; then
            BUCKET_NAME="${{ vars.S3_BUCKET_NAME }}-${{ vars.STAGE }}"
          fi
          echo "üì¶ Using S3 bucket: $BUCKET_NAME"

          # Sync container app files to root with metadata for caching
          echo "Syncing container app to root..."
          aws s3 sync apps/container/dist/ s3://$BUCKET_NAME/ --delete --cache-control "public, max-age=60" --content-type "text/html" --exclude "*" --include "index.html" --include "404.html" || true
          # Static assets with long cache
          aws s3 sync apps/container/dist/ s3://$BUCKET_NAME/ --delete --exclude "index.html" --exclude "404.html" --cache-control "public, max-age=31536000, immutable"

          # Sync all micro-frontend apps to their respective subdirectories
          for app_dir in apps/*/; do
            app_name=$(basename "$app_dir")
            # Skip container app (already synced to root) and e2e apps
            if [[ "$app_name" != "container" && "$app_name" != *"-e2e" ]]; then
              if [[ -d "apps/$app_name/dist" ]]; then
                echo "Syncing $app_name micro-frontend..."
                aws s3 sync "apps/$app_name/dist/" "s3://$BUCKET_NAME/$app_name/" --cache-control "public, max-age=31536000, immutable"
              fi
            fi
          done

      - name: Invalidate CloudFront Cache
        run: |
          echo "üîÑ Checking for CloudFront distribution..."
          cd infra/terraform
          terraform init \
            -backend-config="bucket=${{ vars.S3_STATE_BUCKET_NAME }}" \
            -backend-config="key=portfolio/${{ vars.STAGE }}/terraform.tfstate" \
            -backend-config="region=${{ needs.common-env.outputs.aws_region }}" >/dev/null 2>&1 || true
          DISTRIBUTION_ID=$(terraform output -raw cloudfront_distribution_id 2>/dev/null || echo "")
          if [ ! -z "$DISTRIBUTION_ID" ] && [ "$DISTRIBUTION_ID" != "null" ]; then
            echo "‚òÅÔ∏è Found CloudFront distribution: $DISTRIBUTION_ID"
            echo "üîÑ Creating CloudFront invalidation..."
            INVALIDATION_ID=$(aws cloudfront create-invalidation \
              --distribution-id "$DISTRIBUTION_ID" \
              --paths "/*" \
              --query 'Invalidation.Id' \
              --output text)
            echo "‚úÖ CloudFront invalidation created: $INVALIDATION_ID"
          else
            echo "‚ÑπÔ∏è No CloudFront distribution found - skipping cache invalidation"
          fi

      - name: Get website URL
        id: get-url
        run: |
          WEBSITE_URL="${{ needs.infrastructure.outputs.website-url }}"
          if [ -z "$WEBSITE_URL" ]; then
            BUCKET_NAME="${{ needs.infrastructure.outputs.s3-bucket-name }}"
            if [ -z "$BUCKET_NAME" ]; then
              BUCKET_NAME="${{ vars.S3_BUCKET_NAME }}-${{ vars.STAGE }}"
            fi
            WEBSITE_URL="http://$BUCKET_NAME.s3-website-${{ needs.common-env.outputs.aws_region }}.amazonaws.com"
          fi
          echo "website-url=$WEBSITE_URL" >> $GITHUB_OUTPUT

      - name: Display deployment info
        run: |
          echo "üéâ Application deployment successful!"
          echo "üåç Environment: ${{ github.event.inputs.environment || 'Production' }}"
          BUCKET_NAME="${{ needs.infrastructure.outputs.s3-bucket-name }}"
          if [ -z "$BUCKET_NAME" ]; then
            BUCKET_NAME="${{ vars.S3_BUCKET_NAME }}-${{ vars.STAGE }}"
          fi
          echo "üì¶ App files synced to S3 bucket: $BUCKET_NAME"
          echo "üåê S3 Website URL: ${{ steps.get-url.outputs.website-url }}"
          cd infra/terraform
          terraform init -backend-config="bucket=${{ vars.S3_STATE_BUCKET_NAME }}" -backend-config="key=portfolio/${{ vars.STAGE }}/terraform.tfstate" -backend-config="region=${{ needs.common-env.outputs.aws_region }}" > /dev/null 2>&1 || true
          HTTPS_URL=$(terraform output -raw https_website_url 2>/dev/null || echo "")
          WWW_URL=$(terraform output -raw www_website_url 2>/dev/null || echo "")
          if [ ! -z "$HTTPS_URL" ] && [ "$HTTPS_URL" != "null" ]; then
            echo "üîí Custom Domain: $HTTPS_URL"
          fi
          if [ ! -z "$WWW_URL" ] && [ "$WWW_URL" != "null" ]; then
            echo "üîí WWW Domain: $WWW_URL"
          fi
          CLOUDFRONT_DOMAIN=$(terraform output -raw cloudfront_domain_name 2>/dev/null || echo "")
          if [ ! -z "$CLOUDFRONT_DOMAIN" ] && [ "$CLOUDFRONT_DOMAIN" != "null" ]; then
            echo "‚òÅÔ∏è CloudFront URL: https://$CLOUDFRONT_DOMAIN"
          fi