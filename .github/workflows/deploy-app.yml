name: Deploy Application

on:
  push:
    branches: [main]
    paths:
      - 'apps/**'
      - 'libs/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - 'nx.json'
      - 'tsconfig*.json'
      - '.github/workflows/**'
      - 'infra/**'
  pull_request:
    branches: [main]
    paths:
      - 'apps/**'
      - 'libs/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - 'nx.json'
      - 'tsconfig*.json'
      - '.github/workflows/**'
      - 'infra/**'
  workflow_run:
    workflows: ["Deploy Infrastructure"]
    types: [completed]
    branches: [main]
  workflow_dispatch: # Allow manual trigger
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'Production'
        type: choice
        options:
          - Production
          - Development

env:
  AWS_REGION: ${{ vars.AWS_REGION || 'us-east-1' }}

permissions:
  id-token: write # Required for OIDC
  contents: read # Required for actions/checkout
  actions: read # Required for reusable workflows

jobs:
  # Deploy infrastructure first if needed (includes CI)
  infrastructure:
    # if: |
    #   (github.event_name != 'pull_request' || (vars.DEPLOY_ON_PR == 'true' && github.ref == 'refs/heads/main'))
    uses: ./.github/workflows/deploy-infra.yml
    secrets: inherit

  build:
    runs-on: ubuntu-latest
    # if: |
    #   (github.event_name != 'pull_request' || (vars.DEPLOY_ON_PR == 'true' && github.ref == 'refs/heads/main'))
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm

      - name: Build application
        run: |
          # Build all apps that are not e2e tests (exclude projects ending with -e2e)
          npx nx run-many --target=build --all --exclude="*-e2e"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            apps/*/dist/
          retention-days: 1

  # Deploy the application to S3
  deploy:
    needs: [infrastructure, build]
    runs-on: ubuntu-latest
    # if: |
    #   needs.infrastructure.result == 'success' &&
    #   (github.event_name != 'pull_request' || (vars.DEPLOY_ON_PR == 'true' && github.ref == 'refs/heads/main'))
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Sync files to S3
        run: |
          # Get the bucket name from infrastructure job outputs or fallback to variable
          BUCKET_NAME="${{ needs.infrastructure.outputs.s3-bucket-name }}"
          if [ -z "$BUCKET_NAME" ]; then
            BUCKET_NAME="${{ vars.S3_BUCKET_NAME }}"
          fi
          
          echo "📦 Using S3 bucket: $BUCKET_NAME"
          
          # Sync container app files to root
          aws s3 sync apps/container/dist/ s3://$BUCKET_NAME/ --delete
          
          # Sync all micro-frontend apps to their respective subdirectories
          for app_dir in apps/*/; do
            app_name=$(basename "$app_dir")
            # Skip container app (already synced to root) and e2e apps
            if [[ "$app_name" != "container" && "$app_name" != *"-e2e" ]]; then
              if [[ -d "apps/$app_name/dist" ]]; then
                echo "Syncing $app_name micro-frontend..."
                aws s3 sync "apps/$app_name/dist/" "s3://$BUCKET_NAME/$app_name/"
              fi
            fi
          done

      - name: Get website URL
        id: get-url
        run: |
          # Use URL from infrastructure outputs or construct from bucket name
          WEBSITE_URL="${{ needs.infrastructure.outputs.website-url }}"
          if [ -z "$WEBSITE_URL" ]; then
            BUCKET_NAME="${{ needs.infrastructure.outputs.s3-bucket-name }}"
            if [ -z "$BUCKET_NAME" ]; then
              BUCKET_NAME="${{ vars.S3_BUCKET_NAME }}"
            fi
            WEBSITE_URL="http://$BUCKET_NAME.s3-website-${{ env.AWS_REGION }}.amazonaws.com"
          fi
          echo "website-url=$WEBSITE_URL" >> $GITHUB_OUTPUT

      - name: Display deployment info
        run: |
          echo "🎉 Application deployment successful!"
          echo "🌍 Environment: ${{ github.event.inputs.environment || 'Production' }}"
          BUCKET_NAME="${{ needs.infrastructure.outputs.s3-bucket-name }}"
          if [ -z "$BUCKET_NAME" ]; then
            BUCKET_NAME="${{ vars.S3_BUCKET_NAME }}"
          fi
          echo "📦 App files synced to S3 bucket: $BUCKET_NAME"
          echo "🌐 Website URL: ${{ steps.get-url.outputs.website-url }}"